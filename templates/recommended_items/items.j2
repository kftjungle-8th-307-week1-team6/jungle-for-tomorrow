<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>추천 아이템</title>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://ai-public.creatie.ai/gen_page/tailwind-custom.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com/3.4.5?plugins=forms@0.5.7,typography@0.5.13,aspect-ratio@0.4.2,container-queries@0.1.1"></script>
  <script src="https://ai-public.creatie.ai/gen_page/tailwind-config.min.js" data-color="#000000" data-border-radius="small"></script>

  <!-- Pretendard 폰트 -->
  <link rel="stylesheet" as="style" crossorigin href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/variable/pretendardvariable.min.css" />

  <!-- 이 부분은 절대 지우지 마세요. -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Black+Han+Sans&display=swap" rel="stylesheet">

  <style>
    *{
      font-family: "Pretendard Variable", Pretendard, -apple-system, BlinkMacSystemFont, Roboto, "Helvetica Neue", "Apple SD Gothic Neo", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", sans-serif;
    }
      
    @media screen and (max-width: 500px) {
      nav div span.titlelogo {
        display: none;
      }
    }

    nav div span.titlelogo {
        box-sizing: border-box;
        font-family: "Black Han Sans", sans-serif !important;
        font-weight: 400;
        font-style: normal;
    }

    input.focused{
      width: 480px;
      max-width: 100%; 
      transition: width 0.3s;
    }

    input.not_focused{
      width: 240px;
      transition: width 0.3s;
    }
  </style>

</head>
<body class="bg-gray-50 min-h-screen min-w-[400px]">
  <nav class="bg-white shadow">
    <div class="max-w-8xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between h-16">
        <div class="flex-shrink-0 flex items-center">
            <a href="{{ url_for('main.home') }}" class="flex items-center">
          <img class="h-8 w-auto" src="/static/backpack.png" alt="로고">
          <span class="titlelogo font-bold ml-2 text-3xl">내일은 정글</span>
                </a>
        </div>
        <div class="flex items-center">
          {% if  user_details %}
            <span class="text-sm font-bold ">{{ user_details.get('division') }} {{ user_details.get('generation')  }}기 {{ user_details.get('name')  }}</span>
            <span class="text-sm font-medium mr-5"> 님, 환영합니다!</span>
            
            <button class="!rounded-button bg-custom text-white px-4 py-2 text-sm font-medium" onclick="location.href='{{ url_for('user.logout') }}'">
              로그아웃
            </button>

          {% else %}
            <button class="!rounded-button bg-custom text-white px-4 py-2 text-sm font-medium">로그인</button>
          {% endif %}
        </div>
      </div>
    </div>
  </nav>

  <main class="max-w-8xl mx-auto px-4 sm:px-6 lg:px-48 py-8">
    <h1 class="text-2xl font-bold text-gray-900 mb-8">추천 준비물</h1>
    
    <div class="space-y-6">
      <div class="flex flex-wrap gap-2">
        <a href="{{ url_for('recommended_items.recommended_items_page') }}" class="!rounded-button bg-custom text-white px-4 py-2 text-sm font-medium"># 전체</a>
        {% for cat in categories %}
          <a href="{{ url_for('recommended_items.recommended_items_page', category=cat) }}" class="!rounded-button bg-white border border-gray-300 px-4 py-2 text-sm font-medium hover:bg-gray-50"># {{ cat }}</a>
        {% endfor %}
      </div>

      <div class="flex flex-wrap gap-4 items-center">
        <!-- 버튼 -->

        <!-- 관리자용 일괄 삭제 버튼 추가 -->
        {% if is_admin %}
            <button id="batchDeleteBtn" class="!rounded-button bg-red-500 text-white px-4 py-2 text-sm font-medium min-w-[160px] hidden">
              <i class="fas fa-trash mr-2"></i>선택 항목 삭제
            </button>
            <button id="selectModeBtn" class="!rounded-button bg-gray-500 text-white px-4 py-2 text-sm font-medium">
              <i class="fas fa-check-square mr-2"></i>선택 모드
            </button>
        {% endif %}


        {% if   user_details %}
          <button class="!rounded-button bg-custom text-white px-4 py-2 text-sm font-medium min-w-[160px]" id="createNewItem">
            <i class="fas fa-plus mr-2"></i>새 준비물 추가
          </button>
        {% else %}
          <button class="!rounded-button   px-4 py-2 text-sm font-medium min-w-[160px]" style="opacity:0">
            <i class="fas fa-plus mr-2"></i>새 준비물 추가
          </button>
        {% endif %}

        <!-- 검색 기능 & 드롭다운 -->
        <div class="flex  gap-4 md:flex-nowrap " style="width: calc(100% - 176px);">
          <div class="ml-auto w-48 min-w-36">
            <select class="w-full border-gray-300 focus:border-custom focus:ring-custom text-sm">
              <option value="none" disabled>=== 선택 ===</option>
              <option value="item_name" selected>준비물 이름</option>
              <option value="description">추천하는 이유</option>
              <option value="author">작성자</option>
            </select>
          </div>
          <div class="relative w-full md:w-auto">
            <input id="search_field" type="text" placeholder="검색"
              class="w-full md:w-[240px] transition-all duration-300 ease-in-out pl-10 pr-4 py-2 border-gray-300 focus:border-custom focus:ring-custom text-sm">
            <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
          </div>
        </div>
      </div>

      <!-- MongoDB에서 가져온 아이템들을 순회하며 카드로 표시 -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {% for item in items %}
        <div id="{{ item._id }}" class="bg-white rounded-lg shadow p-6 space-y-4 relative">
        <!-- 관리자용 체크박스 추가 -->
        {% if is_admin %}
        <div class="item-checkbox absolute top-2 right-2 hidden">
          <input type="checkbox" class="h-5 w-5 text-custom focus:ring-custom border-gray-300 rounded" data-id="{{ item._id }}">
        </div>
        {% endif %}
          <div class="flex justify-between items-start">
            <div class="flex items-center gap-2">
              <h3 class="text-lg font-medium rec-item-name">{{ item.item_name }}</h3>
              <div class="flex">
                <span class="text-sm text-gray-500 rec-item-quantity">{{ item.quantity }} </span>
                <span class="text-sm text-gray-500 rec-item-unit">{{ item.unit }} </span>
              </div>
            </div>
            <span class="text-sm text-custom bg-blue-50 px-2 py-1 rounded-full rec-item-category">{{ item.item_type }}</span>
          </div>
          <p class="text-sm text-gray-600 rec-item-description">{{ item.description }}
          </p>
          <p class="text-right ">
            <span class="text-sm text-gray-600 rec-item-author-division">― {{ item.author_division }}</span>
            <span class="text-sm text-gray-600 rec-item-author-generation">{{ item.author_generation }}기</span>
            <span class="text-sm text-gray-600 font-bold rec-item-author-name">{{ item.author_name }}</span>
          </p>
          <div class="flex justify-between items-center pt-4">
            <button class="!rounded-button bg-custom text-white px-4 py-2 text-sm font-medium">
              <i class="fas fa-plus mr-2"></i>담기
              <span class="itemShippedCount" >{{ item.shipped_count }}</span>
            </button>

            {% if user_details and 
              user_details.get('division') == item.author_division and 
              user_details.get('generation') == item.author_generation and 
              user_details.get('name') == item.author_name
            %}
              <div class="flex gap-2">
                <button class="text-gray-400 hover:text-gray-600">                                
                  <i class="fas fa-edit"></i>
                </button>
                <button class="text-gray-400 hover:text-gray-600">                                
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            {% endif %}
          </div>
        </div>
        {% endfor %}
      </div>
      <div class="flex justify-center mt-8">
        <nav class="flex items-center space-x-2">
          {# 이전 페이지 버튼 #}
          {% if pagination.has_prev %}
            <a href="/recommended-items/list?{{ parameter_dict|update({'page': pagination.prev_num})|urlencode }}"
              class="!rounded-button px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 hover:bg-gray-50">
              <i class="fas fa-chevron-left"></i>
            </a>
          {% else %}
            <button disabled class="!rounded-button px-3 py-2 text-sm font-medium text-gray-300 bg-white border border-gray-200 cursor-default">
              <i class="fas fa-chevron-left"></i>
            </button>
          {% endif %}

          {# 페이지 번호 버튼 #}
          {% for page_num in pagination.pages_range %}
            <a href="/recommended-items/list?{{ parameter_dict|update({'page': page_num})|urlencode }}"
              class="!rounded-button px-4 py-2 text-sm font-medium {% if page_num == pagination.page %}text-white bg-custom{% else %}text-gray-500 bg-white border border-gray-300 hover:bg-gray-50{% endif %}">
              {{ page_num }}
            </a>
          {% endfor %}

          {# 다음 페이지 버튼 #}
          {% if pagination.has_next %}
            <a href="/recommended-items/list?{{ parameter_dict|update({'page': pagination.next_num})|urlencode }}"
              class="!rounded-button px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 hover:bg-gray-50">
              <i class="fas fa-chevron-right"></i>
            </a>
          {% else %}
            <button disabled class="!rounded-button px-3 py-2 text-sm font-medium text-gray-300 bg-white border border-gray-200 cursor-default">
              <i class="fas fa-chevron-right"></i>
            </button>
          {% endif %}
        </nav>
      </div>
    </div>
  </main>

  <!-- 생성 모달 (초기에는 hidden) -->
  <div id="createModal" class="fixed inset-0 hidden bg-black bg-opacity-50 flex justify-center items-center">
    <div class="bg-white p-6 rounded shadow-lg w-full max-w-lg">  
      <h2 class="text-xl font-bold mb-4">새 아이템 추가</h2>
      <form>
        <input type="hidden" id="newAuthorName" value="{{ user_details.get('name') if user_details  }}">
        <input type="hidden" id="newAuthorDivision" value="{{ user_details.get('division') if user_details   }}">
        <input type="hidden" id="newAuthorGeneration" value="{{ user_details.get('generation') if user_details   }}">
        <div class="mb-4">
          <label class="block text-gray-700 mb-2" for="newItemTitle">아이템명</label>
          <input type="text" id="newItemTitle" class="w-full border border-gray-300 p-2 rounded" placeholder="아이템명을 입력하세요">
        </div>

        <div class="mb-4 flex">
          <div class="mb-4 mr-4 w-full">
            <label class="block text-gray-700 mb-2" for="newItemQuantity">수량</label>
            <input type="text" id="newItemQuantity" class="w-full border border-gray-300 p-2 rounded" placeholder="수량을 입력하세요">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 mb-2" for="newItemUnit">단위</label>
            <input type="text" id="newItemUnit" class="w-full border border-gray-300 p-2 rounded" placeholder="예시: 개, kg, ml">
          </div>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 mb-2" for="newItemCategory">카테고리</label>
          <select id="newItemCategory" class="w-full border border-gray-300 p-2 rounded">
            {% for cat in categories %}
              <option value="{{ cat }}">{{ cat }}</option>
            {% endfor %}
          </select>
        </div>

        <div class="mb-4">
          <label class="block text-gray-700 mb-2" for="newItemDescription">설명</label>
          <textarea id="newItemDescription" class="w-full border border-gray-300 p-2 rounded" rows="3" placeholder="설명을 입력하세요"></textarea>
        </div>
        <div class="flex justify-end gap-2">
          <button type="button" id="cancelCreate" class="!rounded-button bg-gray-300 text-white px-4 py-2 text-sm font-medium">취소</button>
          <button type="submit" id="submitCreate" class="!rounded-button bg-custom text-white px-4 py-2 text-sm font-medium">저장</button> 
        </div>
      </form>
    </div>
  </div>  

  <!-- 수정 모달 (초기에는 hidden) -->
  <div id="editModal" class="fixed inset-0 hidden bg-black bg-opacity-50 flex justify-center items-center">
    <div class="bg-white p-6 rounded shadow-lg w-full max-w-lg">  
      <h2 class="text-xl font-bold mb-4">아이템 수정</h2>
      <form id="editForm">
        <!-- 수정할 아이템의 `_id`값 -->
        <input type="hidden" id="editItemId" value="">
        <div class="mb-4">
          <label class="block text-gray-700 mb-2" for="editItemTitle">아이템명</label>
          <input type="text" id="editItemTitle" class="w-full border border-gray-300 p-2 rounded" placeholder="아이템명을 입력하세요">
        </div>

        <div class="mb-4 flex">
          <div class="mb-4 mr-4 w-full">
            <label class="block text-gray-700 mb-2" for="editItemQuantity">수량</label>
            <input type="text" id="editItemQuantity" class="w-full border border-gray-300 p-2 rounded" placeholder="수량을 입력하세요">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 mb-2" for="editItemUnit">단위</label>
            <input type="text" id="editItemUnit" class="w-full border border-gray-300 p-2 rounded" placeholder="예시: 개, kg, ml">
          </div>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 mb-2" for="editItemCategory">카테고리</label>
          <select id="editItemCategory" class="w-full border border-gray-300 p-2 rounded">
            {% for cat in categories %}
              <option value="{{ cat }}">{{ cat }}</option>
            {% endfor %}
          </select>
        </div>

        <div class="mb-4">
          <label class="block text-gray-700 mb-2" for="editItemDescription">설명</label>
          <textarea id="editItemDescription" class="w-full border border-gray-300 p-2 rounded" rows="3" placeholder="설명을 입력하세요"></textarea>
        </div>
        <div class="flex justify-end gap-2">
          <button type="button" id="cancelEdit" class="!rounded-button bg-gray-300 text-white px-4 py-2 text-sm font-medium">취소</button>
          <button type="submit" class="!rounded-button bg-custom text-white px-4 py-2 text-sm font-medium">저장</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // TODO: static 경로의 .js 파일로 분리하여 관리하도록 - 근데 언제 하지

    function deleteItemFromDb(card) {
      if (confirm('이 아이템을 삭제하시겠습니까?')) {
        const itemId = card.id;
        fetch(`/recommended-items/item/${itemId}`, {
          method: 'DELETE'
        })
        .then(response => response.json())
        .then(result => {
          alert('아이템이 삭제되었습니다.');
          card.remove();
        })
        .catch(error => {
          console.error('오류:', error);
          alert('삭제 중 오류가 발생했습니다.');
        });
      }
    }

    // 참고: 새 아이템 추가 모달 열기임.
    function openCreateNewItemModal() {
      document.getElementById('createModal').classList.remove('hidden');
    }

    // 참고: 새 아이템 추가 모달 열기임.
    function closeCreateNewItemModal() {
      document.getElementById('createModal').classList.add('hidden');
    }

    // 참고: 수정 모달 열기임.
    function openModal(card) { 
      const modal = document.getElementById('editModal');
      const title = card.querySelector('h3').textContent;
      const quantity = card.querySelector('.rec-item-quantity').textContent.trim();
      const unit = card.querySelector('.rec-item-unit').textContent.trim();
      const description = card.querySelector('.rec-item-description').textContent.trim();
      const category = card.querySelector('.rec-item-category').textContent.trim();
      const itemId = card.id;
      
      document.getElementById('editItemId').value = itemId;
      document.getElementById('editItemTitle').value = title;
      document.getElementById('editItemQuantity').value = quantity;
      document.getElementById('editItemUnit').value = unit;
      document.getElementById('editItemDescription').value = description;
      document.getElementById('editItemCategory').value = category;

      modal.classList.remove('hidden');
    } 

    // 참고: 수정 모달 열기임.
    function closeModal() {
      const modal = document.getElementById('editModal');
      modal.classList.add('hidden');
    }

    // 새 아이템 추가 모달 열기
    document.querySelector('#createNewItem').addEventListener('click', () => {
      openCreateNewItemModal();
    });
    
    // 새 아이템 추가 모달 닫기
    document.querySelector('#cancelCreate').addEventListener('click', () => {
      closeCreateNewItemModal();
    });

    // 수정 아이콘 클릭 시 모달 열기
    document.querySelectorAll('.fa-edit').forEach(icon => {
      icon.addEventListener('click', () => {
        // id attribute가 있는 가장 가까운 부모 요소 찾기
        const card = icon.closest('[id]');
        openModal(card);
      });
    });

    // 삭제 아이콘 클릭 시 해당 아이템을 제거
    document.querySelectorAll('.fa-trash').forEach(icon => {
      icon.addEventListener('click', () => {
        // id attribute가 있는 가장 가까운 부모 요소 찾기
        const card = icon.closest('[id]');
        deleteItemFromDb(card);
      });
    });

    // 취소 버튼 클릭 시 모달 닫기
    document.getElementById('cancelEdit').addEventListener('click', () => {
      closeModal();
    });

    // 수정 폼 제출 시 (수정 저장)
    document.getElementById('editForm').addEventListener('submit', (e) => {
      e.preventDefault();

      const itemId = document.getElementById('editItemId').value;
      const itemTitle = document.getElementById('editItemTitle').value;
      const itemCategory = document.getElementById('editItemCategory').value;
      const itemQuantity = document.getElementById('editItemQuantity').value;
      const itemUnit = document.getElementById('editItemUnit').value;
      const itemDescription = document.getElementById('editItemDescription').value;

      // PUT 요청으로 보낼 JSON 데이터 구성
      const data = {
        item_name: itemTitle,
        category: itemCategory,
        quantity: itemQuantity,
        unit: itemUnit,
        description: itemDescription
      };

      // /item/<itemId> URL로 PUT 요청 (서버에서 해당 _id에 대해 업데이트 진행)
      fetch(`/recommended-items/item/${itemId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => response.json())
      .then(result => {
        alert('수정 내용이 저장되었습니다.');
        closeModal();
        // UI상에서 카드 업데이트 등 추가 작업 진행
        window.location.reload();

      })
      .catch(error => {
        console.error('Error:', error);
        alert('수정 중 오류가 발생했습니다.');
      });
    });

    // 생성 폼 제출 시 (생성 저장)
    document.querySelector('#submitCreate').addEventListener('click', (e) => {
      e.preventDefault();

      const itemAuthorName = document.getElementById('newAuthorName').value;
      const itemAuthorDivision = document.getElementById('newAuthorDivision').value;  
      const itemAuthorGeneration = document.getElementById('newAuthorGeneration').value;
      const itemTitle = document.getElementById('newItemTitle').value;
      const itemCategory = document.getElementById('newItemCategory').value;
      const itemQuantity = document.getElementById('newItemQuantity').value;
      const itemUnit = document.getElementById('newItemUnit').value;
      const itemDescription = document.getElementById('newItemDescription').value;

      // POST 요청으로 보낼 JSON 데이터 구성
      const data = {
        author_name: itemAuthorName,
        author_division: itemAuthorDivision,
        author_generation: itemAuthorGeneration,
        item_name: itemTitle,
        category: itemCategory,
        quantity: itemQuantity,
        unit: itemUnit,
        description: itemDescription
      };

      // POST /item로 요청 (서버에서 새로운 아이템 생성)
      fetch('/recommended-items/item', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => response.json())
      .then(result => {
        alert('새 아이템이 추가되었습니다.');
        closeCreateNewItemModal();
        // UI상에서 카드 추가 등 추가 작업 진행
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        alert('준비물 추가 도중 오류가 발생했습니다.');
      });
    });

    // 기존의 "담기" 및 삭제 기능 이벤트 핸들러
    document.querySelectorAll('button').forEach(button => {
      // 버튼의 텍스트가 '담기'를 포함하는지? or 정확히 일치하는지?
      if (button.textContent.trim().includes('담기')) {
        button.addEventListener('click', async () => {
          if (!confirm('이 준비물을 나의 목록에도 담을까요?')) {
            return;
          }
          
          const container = button.closest('[id]');
          if (!container) {
            console.error('오류: 해당 버튼의 상위 요소에서 id를 찾을 수 없음.');
            alert('준비물을 담는 도중 오류가 발생했습니다.');
            return;
          }
          const itemId = container.id;
          
          try {
            const response = await fetch(`/recommended-items/item/${itemId}/save`, {
              method: 'POST'
            });
            
            if (!response.ok) {
              // JSON 응답으로부터 에러 메시지를 받아서 출력
              // {"result": "failure", "reason": "Item already saved"} 형태로 받음
              const result = await response.json();
              alert(`오류: ${result.reason}`);
              return;
            }
            
            // 결과 수신 && 담기 옆 숫자 1을 더하기
            const result = await response.json();
            const shippedCount = container.querySelector('.itemShippedCount');
            shippedCount.textContent = `${result.shipped_count}`;
            alert('준비물이 성공적으로 담았습니다.');
          } catch (error) {
            console.error('Error:', error);
            alert('준비물을 담는 도중 오류가 발생했습니다.');
          }
        });
      }
    });

    // 검색 상자 클릭 시 좌측으로 뻗어나감.
    const searchField = document.getElementById('search_field');

    // not-focused 클래스 제거 및 focused 클래스 추가, 그리고 vise versa
    searchField.addEventListener('focus', () => {
      searchField.classList.remove('not_focused');  
      searchField.classList.add('focused');
    });

    searchField.addEventListener('blur', () => {
      searchField.classList.remove('focused');
      searchField.classList.add('not_focused');
    });
    
    // 검색 기능 구현 (엔터 키 입력 시에만 반영)
    document.getElementById('search_field').addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();  // 기본 엔터 동작 방지
        const searchValue = e.target.value.trim();
        const searchField = document.querySelector('select').value;

        const params = new URLSearchParams(window.location.search);
        if (searchValue) {
          params.set('search', searchValue);
          params.set('search_field', searchField);
        } else {
          params.delete('search');
          params.delete('search_field');
        }

        window.location.search = params.toString();
      }
    });
    // 관리자용 일괄 삭제 기능
    {% if is_admin %}
    let selectMode = false;
    // 선택 모드 토글
  document.getElementById('selectModeBtn').addEventListener('click', function() {
    selectMode = !selectMode;
    const checkboxes = document.querySelectorAll('.item-checkbox');
    const batchDeleteBtn = document.getElementById('batchDeleteBtn');

    if (selectMode) {
      // 선택 모드 활성화
      this.textContent = '선택 모드 해제';
      this.classList.remove('bg-gray-500');
      this.classList.add('bg-blue-500');
      checkboxes.forEach(cb => cb.classList.remove('hidden'));
      batchDeleteBtn.classList.remove('hidden');
    } else {
      // 선택 모드 비활성화
      this.textContent = '선택 모드';
      this.classList.remove('bg-blue-500');
      this.classList.add('bg-gray-500');
      checkboxes.forEach(cb => {
        cb.classList.add('hidden');
        cb.querySelector('input').checked = false;
      });
      batchDeleteBtn.classList.add('hidden');
    }
  });

  // 일괄 삭제 버튼 클릭 이벤트
  document.getElementById('batchDeleteBtn').addEventListener('click', function() {
    const selectedItems = Array.from(document.querySelectorAll('.item-checkbox input:checked'))
      .map(checkbox => checkbox.getAttribute('data-id'));

    if (selectedItems.length === 0) {
      alert('삭제할 항목을 선택해주세요.');
      return;
    }

    if (confirm(`선택한 ${selectedItems.length}개 항목을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.`)) {
      // 서버에 삭제 요청
      fetch('/admin/items/batch-delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ item_ids: selectedItems })
      })
      .then(response => response.json())
      .then(result => {
        if (result.result === 'success') {
          alert(`${result.deleted_count}개 항목이 삭제되었습니다.`);
          // 페이지 새로고침
          window.location.reload();
        } else {
          alert('삭제 중 오류가 발생했습니다: ' + result.reason);
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('삭제 중 오류가 발생했습니다.');
      });
    }
  });
  {% endif %}

  </script>
</body>
</html>
